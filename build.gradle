//buildscript {
//    apply from: 'https://moddingx.github.io/ModUtils/v5/buildscript.gradle', to: buildscript
//}
//
//apply from: 'https://moddingx.github.io/ModUtils/v5/mod.gradle'
//apply plugin: 'org.moddingx.modgradle.cursedep'
//
//dependencies {
//    implementation curse.mod(325235, 4886408)
//}

plugins {
    id 'java-library'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.142'
}

version = minecraft_version + '-' + mod_version
group = mod_group_id

repositories {
    mavenLocal()
}

base {
    archivesName = project.name
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

final Closure defaultRun = {
    property 'forge.logging.console.level', 'debug'
    property 'forge.logging.markers', 'REGISTRIES'
    mods {
        "${mod.modid}" {
            source sourceSets.main
        }
    }
}
runs {
    configureEach {
        // "SCAN": For mods scan.
        // "REGISTRIES": For firing of registry events.
        // "REGISTRYDUMP": For getting the contents of all registries.
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    data {
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }
configurations {
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_license            : mod_license,
            mod_version: version
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = project.group
            artifactId = project.name
            version = project.version
            artifact(jar)
            pom {
                licenses {
                    license {
                        name = mod_license
                        url = mod_license_url
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url "https://maven.melanx.de/release"
            credentials(PasswordCredentials)
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
